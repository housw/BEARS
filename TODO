
# 0. try fit-SNE: 
    a0. https://opentsne.readthedocs.io/en/latest/
    a1. tain based on larger contigs, then embedding full: https://opentsne.readthedocs.io/en/latest/examples/04/04_large_data_sets.html
    a. https://pypi.org/project/fitsne/
    b. https://github.com/KlugerLab/FIt-SNE
    c. https://github.com/KlugerLab/pyFIt-SNE/blob/master/examples/iris_example.py
    conda config --add channels conda-forge #if not already in your channels. Needed for fftw.
    conda install cython numpy fftw
    # or sudo apt-get install fftw3
    pip install fitsne


# 

? seperate tsne and umap to dimred ? 



# 1. implement affinity propagation and spectral clustering:
       a.  https://github.com/ciortanmadalina/high_noise_clustering/blob/master/spectral_clustering.ipynb 
       b.  https://towardsdatascience.com/spectral-graph-clustering-and-optimal-number-of-clusters-estimation-32704189afbe     
    The spectral clustering can be optimized with dask-ml: 
       https://ml.dask.org/modules/generated/dask_ml.cluster.SpectralClustering.html#dask_ml.cluster.SpectralClustering

# 2. implement a contig neighbor search using PyNNDescent
    a. https://github.com/lmcinnes/pynndescent
    bears sim knn 

# 3. visulization 3d tSNE or UMAP coordinates using echars or hypertools:
    a. https://echarts.apache.org/examples/en/editor.html?c=scatter3d&gl=1&theme=dark
    b. using hypertools: https://github.com/ContextLab/hypertools/blob/master/tests/test_plot.py

# 4. possibly define euk bins using BUSCO ?
    a. https://busco.ezlab.org/
